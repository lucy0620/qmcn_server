// import * as commen from './commen.js' //js文件不可以這樣引用
const commen = require('./commen')
const express = require('express');
const https = require('https') // 請求別人的鏈接的
const app = express();
const fd = require('formidable');
const fs = require("fs");
const bp = require('body-parser');
const db = require('./mysql');// 把db单独放在一个js文件
app.use(bp.urlencoded({
  extended: false
}));
const cors = require('cors');
const { resolve } = require('path');
const { rejects } = require('assert');
const { resolveSoa } = require('dns');
app.use(cors());
app.all('*', function (mes, res, next) {
  res.setHeader('Access-Control-Allow-Origin',
    'http://localhost:63342')
  next();
})
app.use(express.static('./'));
app.listen(7890, function () {
  console.log('服务器开启监听，7890...')
})
const host = 'https://www.lucy0612.asia'
// ------------------登录/注册--------------------
app.get('/getUserInfo', async function (mes, resp, next) {
  console.log('path:', mes.path)
  console.log('query:', mes.query) // 若是post请求，则用body
  let user_info = {
    nickName: '',
    avatarUrl: '',
    phone: ''
  }
  // 0.根据code调取wx接口获取openid
  let jscode_data = {
    appid: 'wx78d9e0fee4fe52f5',
    secret: '310f942962c3668ee77d09ed51e70716',
    js_code: mes.query.js_code,
    grant_type: 'authorization_code',
  }
  let url = "https://api.weixin.qq.com/sns/jscode2session?" + commen.joinParams(jscode_data);
  const resolveRes = await commen.getHttps(url) // await寫法是then((res)=>{})的語法糖
  // 1.根据openid查找数据
  let params = [resolveRes.openid]
  let sql = "select * from user where openid=? ;";
  let result = await db.query(sql, params);
  // 2.找到了就返回昵称头像
  if (result.length > 0) {
    user_info = {
      nickName: result[0].nickName,
      avatarUrl: result[0].avatarUrl,
      phone: result[0].phone,
      role: result[0].role,
    }
  } else { // 3.找不到就数据库插入该数据即注册
    let params = [resolveRes.openid, mes.query.nickName, mes.query.avatarUrl, 2]
    let sql = "insert into user(openid,nickName,avatarUrl,role) value(?,?,?,?)"
    let result = await db.query(sql, params);
    if (result) {
      user_info.nickName = mes.query.nickName
      user_info.avatarUrl = mes.query.avatarUrl
    }
  }
  // 4.返回请求
  resp.json({
    user_info: user_info
  })
})
// ------------------最新入库书籍--------------------
app.get('/getBooks_new', async function (mes, resp, next) {
  console.log('path:', mes.path)
  let params = []
  // 和限定条数
  /*
    排序： order by 字段名 desc
    查找固定数量： limit 个数
  */
  // let sql = "select * from book order by create_time desc limit 10 ;";
  /*
    联表查询： 表a left join 表b on 表a.字段名 = 表b.字段名
    返回所有列： 表名.* 
    返回固定列： 表名.字段名 
    重命名： 旧名 as 新名
    带逗号的关联查询：group_concat，find_in_set，详见ipad笔记
  */
  let sql = "select b.*, group_concat(distinct b_l.label_name) as label_names, b_t.name as type_name from qmcn.book b left join qmcn.book_type b_t on b.type_id = b_t.type_id left join qmcn.book_label b_l on find_in_set(b_l.label_id, b.label_ids) group by b.id order by create_time desc limit 10;"
  let result = await db.query(sql, params);
  let res = []
  if (result.length > 0) {
    res = result
  }
  resp.json({
    data: result
  })
})
// ------------------书籍列表--------------------
/*
  模糊查询： like %字符%
  查找第几条到第几条： limit 开始下标,个数
*/
app.get('/getBooks', async function (mes, resp, next) {
  console.log('path:', mes.path)
  console.log('query:', mes.query)
  let limit = [(mes.query.page - 1) * mes.query.count, mes.query.count]
  let name = mes.query.keyword
  let sql = `select * from book limit ${limit[0]},${limit[1]}`;
  if (name) {
    sql = `select * from book WHERE name LIKE '%${name}%' or author LIKE '%${name}%' or cvName LIKE '%${name}%' limit ${limit[0]},${limit[1]};`;
  }
  let result = await db.query(sql, []);
  let res = []
  if (result.length > 0) {
    res = result
  }
  resp.json({
    data: result
  })
})
// ------------------书籍搜索--------------------
app.get('/getBooks_filter', async function (mes, resp, next) {
  console.log('path:', mes.path)
  console.log('query:', mes.query)
  let limit = [(mes.query.page - 1) * mes.query.count, mes.query.count]
  let type_id = mes.query.type_id == -1 ? '' : mes.query.type_id
  let publish_website = mes.query.publish_website == -1 ? '' : mes.query.publish_website
  let sql = `select * from (select b.*, 
    group_concat(distinct b_l.label_name) as label_names, b_t.name as type_name from qmcn.book b 
    left join qmcn.book_type b_t on b.type_id = b_t.type_id 
    left join qmcn.book_label b_l on find_in_set(b_l.label_id, b.label_ids) group by b.id order by create_time desc) as new_t
    WHERE new_t.id > 0`;
  if (type_id) {
    sql +=` and new_t.type_id = '${type_id}'`;
  }
  if (publish_website) {
    sql += ` and new_t.publish_website = '${publish_website}'`;
  }
  sql += ` limit ${limit[0]},${limit[1]};`;
  let result = await db.query(sql, []);
  let res = []
  if (result.length > 0) {
    res = result
  }
  resp.json({
    data: result
  })
})
// ------------------获取书籍详情--------------------
/*
  嵌套查询： select * from (...) as 新表名 where 新表明 = 条件；
  group_concat函数去除相同字段：distinct 
*/
app.get('/getBook_detail', async function (mes, resp, next) {
  console.log('path:', mes.path)
  console.log('query:', mes.query)
  let params = [mes.query.id]
  let sql = "select * from (select b.*, group_concat(distinct b_l.label_name) as label_names, group_concat(distinct b_d.derive_name) as derive_names, b_t.name as type_name from qmcn.book b left join qmcn.book_type b_t on b.type_id = b_t.type_id left join qmcn.book_label b_l on find_in_set(b_l.label_id, b.label_ids) left join qmcn.book_derive b_d on find_in_set(b_d.derive_id, b.derive_ids) group by b.id ) as new_b where new_b.id=? ;";
  let result = await db.query(sql, params);
  let obj = ''
  if (result.length > 0) {
    obj = result[0]
  }
  resp.json({
    data: obj
  })
})
// ------------------获取书籍类型--------------------
app.get('/getBook_type', async function (mes, resp, next) {
  console.log('path:', mes.path)
  let sql = `select * from book_type`;
  let result = await db.query(sql, []);
  let res = []
  if (result.length > 0) {
    res = result
  }
  resp.json({
    data: result
  })
})
// ------------------获取书籍标签--------------------
app.get('/getBook_label', async function (mes, resp, next) {
  console.log('path:', mes.path)
  let sql = `select * from book_label`;
  let result = await db.query(sql, []);
  let res = []
  if (result.length > 0) {
    res = result
  }
  resp.json({
    data: result
  })
})
// ------------------获取书籍衍生作品--------------------
app.get('/getBook_derive', async function (mes, resp, next) {
  console.log('path:', mes.path)
  let sql = `select * from book_derive`;
  let result = await db.query(sql, []);
  let res = []
  if (result.length > 0) {
    res = result
  }
  resp.json({
    data: result
  })
})
// ------------------上传图片--------------------
app.post('/upload', function (mes, res) {
  let uploadObj = new fd.IncomingForm();
  uploadObj.parse(mes, function (e, fields, files) {
    let fileInfos = files.file;
    let filename = fileInfos.name;
    var index = filename.lastIndexOf('\.');
    filename = filename.substring(index + 1, filename.length);
    let tempPath = fileInfos.path;
    let readS = fs.createReadStream(tempPath);
    let targetPath = './upload/' + commen.thisTimenum() + '.' + filename;
    let writeS = fs.createWriteStream(targetPath); //写入路径中
    readS.pipe(writeS);
    console.log('缓存成功:', commen.thisTimenum() + '.' + filename);
    res.json({
      data: host + '/upload/' + commen.thisTimenum() + '.' + filename
    });
  })
})
// ------------------书籍入库--------------------
app.get('/addBook', async function (mes, resp, next) {
  console.log('path:', mes.path)
  console.log('query:', mes.query)
  let params = [mes.query.name, mes.query.author, mes.query.words ? mes.query.words : null, mes.query.type_id, mes.query.label_ids,
  mes.query.publish_website, mes.query.publish_time, mes.query.images, mes.query.top, mes.query.bottom,
  mes.query.cpName, mes.query.cvName, mes.query.derive_ids, mes.query.scoreWriting, mes.query.scoreFeeling,
  mes.query.scorePlot]
  let sql = `insert into book (name,author,words,type_id,label_ids,publish_website,publish_time,images,top,bottom,cpName,cvName,derive_ids,scoreWriting,scoreFeeling,scorePlot)
  values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);`;
  let result = await db.query(sql, params);
  let code = ''
  if (result.fieldCount == 0) {
    code = 200
  }
  resp.json({
    code
  })
})
// ------------------书籍编辑--------------------
app.get('/editBook', async function (mes, resp, next) {
  console.log('path:', mes.path)
  console.log('query:', mes.query)
  let params = [mes.query.name, mes.query.author, mes.query.words, mes.query.type_id, mes.query.label_ids,
  mes.query.publish_website, mes.query.publish_time, mes.query.images, mes.query.top, mes.query.bottom,
  mes.query.cpName, mes.query.cvName, mes.query.derive_ids, mes.query.scoreWriting, mes.query.scoreFeeling,
  mes.query.scorePlot, mes.query.id
  ]
  params = params.map((it, i) => {
    if (i == 2) {
      return it == 'null' ? null : it
    }
    return it == 'null' ? '' : it
  })
  let sql = `UPDATE book set name=?,author=?,words=?,type_id=?,label_ids=?,publish_website=?,publish_time=?,images=?,top=?,bottom=?,cpName=?,cvName=?,derive_ids=?,scoreWriting=?,scoreFeeling=?,scorePlot=?
  where id=?;`;
  let result = await db.query(sql, params);
  let code = ''
  if (result.fieldCount == 0) {
    code = 200
  }
  resp.json({
    code
  })
})

